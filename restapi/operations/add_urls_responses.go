// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Magicking/secure-sunrise/models"
)

// AddUrlsOKCode is the HTTP code returned for type AddUrlsOK
const AddUrlsOKCode int = 200

/*AddUrlsOK add urls o k

swagger:response addUrlsOK
*/
type AddUrlsOK struct {
}

// NewAddUrlsOK creates AddUrlsOK with default headers values
func NewAddUrlsOK() *AddUrlsOK {
	return &AddUrlsOK{}
}

// WriteResponse to the client
func (o *AddUrlsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*AddUrlsDefault Internal error

swagger:response addUrlsDefault
*/
type AddUrlsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddUrlsDefault creates AddUrlsDefault with default headers values
func NewAddUrlsDefault(code int) *AddUrlsDefault {
	if code <= 0 {
		code = 500
	}

	return &AddUrlsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add urls default response
func (o *AddUrlsDefault) WithStatusCode(code int) *AddUrlsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add urls default response
func (o *AddUrlsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add urls default response
func (o *AddUrlsDefault) WithPayload(payload *models.Error) *AddUrlsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add urls default response
func (o *AddUrlsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddUrlsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
